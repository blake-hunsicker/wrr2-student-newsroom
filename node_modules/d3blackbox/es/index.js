function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
var D3blackbox = function D3blackbox(D3render) {
    return function (_React$Component) {
        _inherits(Blackbox, _React$Component);

        function Blackbox() {
            _classCallCheck(this, Blackbox);

            var _this = _possibleConstructorReturn(this, _React$Component.apply(this, arguments));

            _this.anchor = React.createRef();
            return _this;
        }

        Blackbox.prototype.componentDidMount = function componentDidMount() {
            D3render(this.anchor, this.props, this.state);
        };

        Blackbox.prototype.componentDidUpdate = function componentDidUpdate() {
            D3render(this.anchor, this.props, this.state);
        };

        Blackbox.prototype.render = function render() {
            var _props = this.props,
                x = _props.x,
                y = _props.y;

            var Component = this.props.component || "g";
            return React.createElement(Component, {
                transform: "translate(" + x + ", " + y + ")",
                ref: this.anchor
            });
        };

        return Blackbox;
    }(React.Component);
};
export default D3blackbox;
export var useD3 = function useD3(render) {
    var refAnchor = React.useRef(null);
    React.useEffect(function () {
        render(refAnchor.current);
    });
    return refAnchor;
};
//# sourceMappingURL=index.js.map