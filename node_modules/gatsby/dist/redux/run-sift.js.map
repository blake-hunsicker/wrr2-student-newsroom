{"version":3,"sources":["../../src/redux/run-sift.js"],"names":["default","sift","require","prepareRegex","makeRe","objectToDottedField","createDbQueriesFromObject","prefixResolvedFields","dbQueryToSiftQuery","ensureEmptyFilterCache","ensureIndexByQuery","ensureIndexByElemMatch","getNodesFromCacheByValue","addResolvedNodes","getNode","siftGetNode","lastFilterUsedSift","createFilterCacheKey","typeNames","filter","f","comparator","paths","push","path","type","q","nestedQuery","query","join","prepareQueryArgs","filterFields","Object","keys","reduce","acc","key","value","_","isPlainObject","isEqId","siftArgs","length","id","handleFirst","nodes","index","isEmpty","findIndex","$and","handleMany","result","filterWithoutSift","filters","nodeTypeNames","filtersCache","nodesPerValueSets","getBucketsForFilters","sort","a","b","size","needles","pop","forEach","node","every","cache","has","exports","filterCacheKey","getBucketsForQueryFilter","collectBucketForElemMatch","undefined","filterPath","filterValue","nodesPerValue","targetValue","nodesByValue","runFilterAndSort","args","queryArgs","resolvedFields","firstOnly","stats","applyFilters","sortNodes","runSift","didLastFilterUseSift","_didLastFilterUseSift","filterStats","filterToStats","comparatorPath","comparatorsUsed","set","get","uniqueFilterPaths","add","totalNonSingleFilters","meta","nodesUnordered","slice","totalIndexHits","siftResult","filterWithSift","totalSiftHits","concat","typeName","runSiftOnNodes","map","$eq","internal","includes","dottedFields","dottedFieldKeys","sortFields","fields","field","some","startsWith","sortFns","v","sortOrder","order","toLowerCase","sortField","uniqueSorts","orderBy"],"mappings":"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","sourcesContent":["// @flow\n\nconst { default: sift } = require(`sift`)\nconst { prepareRegex } = require(`../utils/prepare-regex`)\nconst { makeRe } = require(`micromatch`)\nimport { getValueAt } from \"../utils/get-value-at\"\nimport _ from \"lodash\"\nconst {\n  objectToDottedField,\n  createDbQueriesFromObject,\n  prefixResolvedFields,\n  dbQueryToSiftQuery,\n} = require(`../db/common/query`)\nconst {\n  ensureEmptyFilterCache,\n  ensureIndexByQuery,\n  ensureIndexByElemMatch,\n  getNodesFromCacheByValue,\n  addResolvedNodes,\n  getNode: siftGetNode,\n} = require(`./nodes`)\n\n// More of a testing mechanic, to verify whether last runSift call used Sift\nlet lastFilterUsedSift = false\n\n/**\n * Creates a key for one filterCache inside FiltersCache\n *\n * @param {Array<string>} typeNames\n * @param {DbQuery | null} filter If null the key will have empty path/op parts\n * @returns {FilterCacheKey} (a string: `types.join()/path.join()/operator` )\n */\nconst createFilterCacheKey = (typeNames, filter) => {\n  // Note: while `elemMatch` is a special case, in the key it's just `elemMatch`\n  // (This function is future proof for elemMatch support, won't receive it yet)\n  let f = filter\n  let comparator = ``\n  let paths /*: Array<string>*/ = []\n  while (f) {\n    paths.push(...f.path)\n    if (f.type === `elemMatch`) {\n      let q /*: IDbQueryElemMatch*/ = f\n      f = q.nestedQuery\n      // Make distinction between filtering `a.elemMatch.b.eq` and `a.b.eq`\n      // In practice this is unlikely to be an issue, but it might\n      paths.push(`elemMatch`)\n    } else {\n      let q /*: IDbQueryQuery*/ = f\n      comparator = q.query.comparator\n      break\n    }\n  }\n\n  // Note: the separators (`,` and `/`) are arbitrary but must be different\n  return typeNames.join(`,`) + `/` + paths.join(`,`) + `/` + comparator\n}\n\n/////////////////////////////////////////////////////////////////////\n// Parse filter\n/////////////////////////////////////////////////////////////////////\n\nconst prepareQueryArgs = (filterFields = {}) =>\n  Object.keys(filterFields).reduce((acc, key) => {\n    const value = filterFields[key]\n    if (_.isPlainObject(value)) {\n      acc[key === `elemMatch` ? `$elemMatch` : key] = prepareQueryArgs(value)\n    } else {\n      switch (key) {\n        case `regex`:\n          acc[`$regex`] = prepareRegex(value)\n          break\n        case `glob`:\n          acc[`$regex`] = makeRe(value)\n          break\n        default:\n          acc[`$${key}`] = value\n      }\n    }\n    return acc\n  }, {})\n\n/////////////////////////////////////////////////////////////////////\n// Run Sift\n/////////////////////////////////////////////////////////////////////\n\nfunction isEqId(siftArgs) {\n  // The `id` of each node is invariably unique. So if a query is doing id $eq(string) it can find only one node tops\n  return (\n    siftArgs.length > 0 &&\n    siftArgs[0].id &&\n    Object.keys(siftArgs[0].id).length === 1 &&\n    Object.keys(siftArgs[0].id)[0] === `$eq`\n  )\n}\n\nfunction handleFirst(siftArgs, nodes) {\n  if (nodes.length === 0) {\n    return []\n  }\n\n  const index = _.isEmpty(siftArgs)\n    ? 0\n    : nodes.findIndex(\n        sift({\n          $and: siftArgs,\n        })\n      )\n\n  if (index !== -1) {\n    return [nodes[index]]\n  } else {\n    return []\n  }\n}\n\nfunction handleMany(siftArgs, nodes) {\n  let result = _.isEmpty(siftArgs)\n    ? nodes\n    : nodes.filter(\n        sift({\n          $and: siftArgs,\n        })\n      )\n\n  return result?.length ? result : null\n}\n\n/**\n * Given the path of a set of filters, return the sets of nodes that pass the\n * filter.\n * Only nodes of given node types will be considered\n * A fast index is created if one doesn't exist yet so cold call is slower.\n * Returns undefined if an op was not supported for fast indexes or when no\n * nodes were found for given (query) value. In the zero nodes case, we have to\n * go through Sift to make sure we're not missing an edge case, for now.\n *\n * @param {Array<DbQuery>} filters Resolved. (Should be checked by caller to exist)\n * @param {Array<string>} nodeTypeNames\n * @param {undefined | null | FiltersCache} filtersCache\n * @returns {Array<IGatsbyNode> | null}\n */\nconst filterWithoutSift = (filters, nodeTypeNames, filtersCache) => {\n  if (!filtersCache) {\n    // If no filter cache is passed on, explicitly don't use one\n    return null\n  }\n\n  const nodesPerValueSets /*: Array<Set<IGatsbyNode>> */ = getBucketsForFilters(\n    filters,\n    nodeTypeNames,\n    filtersCache\n  )\n\n  if (!nodesPerValueSets) {\n    // Let Sift take over as fallback\n    return null\n  }\n\n  // Put smallest last (we'll pop it)\n  nodesPerValueSets.sort(\n    (a /*: Set<IGatsbyNode> */, b /*: Set<IGatsbyNode> */) => b.size - a.size\n  )\n  // Iterate on the set with the fewest elements and create the intersection\n  const needles /*: Set<IGatsbyNode>*/ = nodesPerValueSets.pop()\n  // Take the intersection of the retrieved caches-by-value\n  const result /*: Array<IGatsbyNode> */ = []\n\n  // This _can_ still be expensive but the set of nodes should be limited ...\n  needles.forEach((node /*: IGatsbyNode */) => {\n    if (\n      nodesPerValueSets.every((cache /*: Set<IGatsbyNode> */) =>\n        cache.has(node)\n      )\n    ) {\n      // Every cache set contained this node so keep it\n      result.push(node)\n    }\n  })\n\n  // TODO: do we cache this result? I'm not sure how likely it is to be reused\n  // Consider the case of {a: {eq: 5}, b: {eq: 10}}, do we cache the [5,10]\n  // case for all value pairs? How likely is that to ever be reused?\n\n  if (result.length === 0) {\n    return null\n  }\n  return result\n}\n\n// Not a public API\nexports.filterWithoutSift = filterWithoutSift\n\n/**\n * @param {Array<DbQuery>} filters\n * @param {Array<string>} nodeTypeNames\n * @param {FiltersCache} filtersCache\n * @returns {Array<Set<IGatsbyNode>> | undefined} Undefined means at least one\n *   cache was not found. Must fallback to sift.\n */\nconst getBucketsForFilters = (filters, nodeTypeNames, filtersCache) => {\n  const nodesPerValueSets /*: Array<Set<IGatsbyNode>>*/ = []\n\n  // Fail fast while trying to create and get the value-cache for each path\n  let every = filters.every((filter /*: DbQuery*/) => {\n    let filterCacheKey = createFilterCacheKey(nodeTypeNames, filter)\n    if (filter.type === `query`) {\n      // (Let TS warn us if a new query type gets added)\n      const q /*: IDbQueryQuery */ = filter\n      return getBucketsForQueryFilter(\n        filterCacheKey,\n        q,\n        nodeTypeNames,\n        filtersCache,\n        nodesPerValueSets\n      )\n    } else {\n      // (Let TS warn us if a new query type gets added)\n      const q /*: IDbQueryElemMatch*/ = filter\n      return collectBucketForElemMatch(\n        filterCacheKey,\n        q,\n        nodeTypeNames,\n        filtersCache,\n        nodesPerValueSets\n      )\n    }\n  })\n\n  if (every) {\n    return nodesPerValueSets\n  }\n\n  // \"failed at least one\"\n  return undefined\n}\n\n/**\n * Fetch all buckets for given query filter. That means it's not elemMatch.\n *\n * @param {FilterCacheKey} filterCacheKey\n * @param {IDbQueryQuery} filter\n * @param {Array<string>} nodeTypeNames\n * @param {FiltersCache} filtersCache\n * @param {Array<Set<IgatsbyNode>>} nodesPerValueSets\n * @returns {boolean} false means soft fail, filter must go through Sift\n */\nconst getBucketsForQueryFilter = (\n  filterCacheKey,\n  filter,\n  nodeTypeNames,\n  filtersCache,\n  nodesPerValueSets\n) => {\n  let {\n    path: filterPath,\n    query: { comparator /*: as FilterOp*/, value: filterValue },\n  } = filter\n\n  if (!filtersCache.has(filterCacheKey)) {\n    ensureIndexByQuery(\n      comparator,\n      filterCacheKey,\n      filterPath,\n      nodeTypeNames,\n      filtersCache\n    )\n  }\n\n  const nodesPerValue /*: Set<IGatsbyNode> | undefined */ = getNodesFromCacheByValue(\n    filterCacheKey,\n    filterValue,\n    filtersCache\n  )\n\n  // If we couldn't find the needle then maybe sift can, for example if the\n  // schema contained a proxy; `slug: String @proxy(from: \"slugInternal\")`\n  // There are also cases (and tests) where id exists with a different type\n  if (!nodesPerValue) {\n    return false\n  }\n\n  // In all other cases this must be a non-empty Set because the indexing\n  // mechanism does not create a Set unless there's a IGatsbyNode for it\n  nodesPerValueSets.push(nodesPerValue)\n\n  return true\n}\n\n/**\n * @param {FilterCacheKey} filterCacheKey\n * @param {IDbQueryElemMatch} filter\n * @param {Array<string>} nodeTypeNames\n * @param {FiltersCache} filtersCache\n * @param {Array<Set<IGatsbyNode>>} nodesPerValueSets Matching node sets are put in this array\n */\nconst collectBucketForElemMatch = (\n  filterCacheKey,\n  filter,\n  nodeTypeNames,\n  filtersCache,\n  nodesPerValueSets\n) => {\n  // Get comparator and target value for this elemMatch\n  let comparator = ``\n  let targetValue = null\n  let f /*: DbQuery*/ = filter\n  while (f) {\n    if (f.type === `elemMatch`) {\n      const q /*: IDbQueryElemMatch */ = f\n      f = q.nestedQuery\n    } else {\n      const q /*: IDbQueryQuery */ = f\n      comparator = q.query.comparator\n      targetValue = q.query.value\n      break\n    }\n  }\n\n  if (!filtersCache.has(filterCacheKey)) {\n    ensureIndexByElemMatch(\n      comparator,\n      filterCacheKey,\n      filter,\n      nodeTypeNames,\n      filtersCache\n    )\n  }\n\n  const nodesByValue /*: Set<IGatsbyNode> | undefined*/ = getNodesFromCacheByValue(\n    filterCacheKey,\n    targetValue,\n    filtersCache\n  )\n\n  // If we couldn't find the needle then maybe sift can, for example if the\n  // schema contained a proxy; `slug: String @proxy(from: \"slugInternal\")`\n  // There are also cases (and tests) where id exists with a different type\n  if (!nodesByValue) {\n    return false\n  }\n\n  // In all other cases this must be a non-empty Set because the indexing\n  // mechanism does not create a Set unless there's a IGatsbyNode for it\n  nodesPerValueSets.push(nodesByValue)\n\n  return true\n}\n\n/**\n * Filters and sorts a list of nodes using mongodb-like syntax.\n *\n * @param args raw graphql query filter/sort as an object\n * @property {boolean} args.firstOnly true if you want to return only the first\n *   result found. This will return a collection of size 1. Not a single element\n * @property {{filter?: Object, sort?: Object} | undefined} args.queryArgs\n * @property {undefined | null | FiltersCache} args.filtersCache May be null or\n *   undefined. A cache of indexes where you can look up Nodes grouped by a\n *   FilterCacheKey, which yields a Map which holds a Set of Nodes for the value\n *   that the filter is trying to query against.\n *   This object lives in query/query-runner.js and is passed down runQuery.\n *   If it is undefined or null, do not consider to use a fast index at all.\n * @returns Collection of results. Collection will be limited to 1\n *   if `firstOnly` is true\n */\nconst runFilterAndSort = (args: Object) => {\n  const {\n    queryArgs: { filter, sort } = { filter: {}, sort: {} },\n    resolvedFields = {},\n    firstOnly = false,\n    nodeTypeNames,\n    filtersCache,\n    stats,\n  } = args\n\n  const result = applyFilters(\n    filter,\n    firstOnly,\n    nodeTypeNames,\n    filtersCache,\n    resolvedFields,\n    stats\n  )\n\n  return sortNodes(result, sort, resolvedFields, stats)\n}\n\nexports.runSift = runFilterAndSort\n\nexports.didLastFilterUseSift = function _didLastFilterUseSift() {\n  return lastFilterUsedSift\n}\n\n/**\n * Applies filter. First through a simple approach, which is much faster than\n * running sift, but not as versatile and correct. If no nodes were found then\n * it falls back to filtering through sift.\n *\n * @param {Array<DbQuery> | undefined} filterFields\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param {undefined | null | FiltersCache} filtersCache\n * @param resolvedFields\n * @returns {Array<IGatsbyNode> | null} Collection of results. Collection\n *   will be limited to 1 if `firstOnly` is true\n */\nconst applyFilters = (\n  filterFields,\n  firstOnly,\n  nodeTypeNames,\n  filtersCache,\n  resolvedFields,\n  stats\n) => {\n  const filters /*: Array<DbQuery>*/ = filterFields\n    ? prefixResolvedFields(\n        createDbQueriesFromObject(prepareQueryArgs(filterFields)),\n        resolvedFields\n      )\n    : []\n\n  if (stats) {\n    filters.forEach((filter /*: DbQuery*/) => {\n      const filterStats = filterToStats(filter)\n      const comparatorPath = filterStats.comparatorPath.join(`.`)\n      stats.comparatorsUsed.set(\n        comparatorPath,\n        (stats.comparatorsUsed.get(comparatorPath) || 0) + 1\n      )\n      stats.uniqueFilterPaths.add(filterStats.filterPath.join(`.`))\n    })\n    if (filters.length > 1) {\n      stats.totalNonSingleFilters++\n    }\n  }\n\n  if (filtersCache && filters.length === 0) {\n    let filterCacheKey = createFilterCacheKey(nodeTypeNames, null)\n    if (!filtersCache.has(filterCacheKey)) {\n      ensureEmptyFilterCache(filterCacheKey, nodeTypeNames, filtersCache)\n    }\n\n    const cache = filtersCache.get(filterCacheKey).meta.nodesUnordered\n\n    lastFilterUsedSift = false\n\n    if (firstOnly || cache.length) {\n      return cache.slice(0)\n    }\n    return null\n  }\n\n  const result /*: Array<IGatsbyNode> | null */ = filterWithoutSift(\n    filters,\n    nodeTypeNames,\n    filtersCache\n  )\n\n  lastFilterUsedSift = false\n  if (result) {\n    if (stats) {\n      stats.totalIndexHits++\n    }\n    if (firstOnly) {\n      return result.slice(0, 1)\n    }\n    return result\n  }\n  lastFilterUsedSift = true\n\n  const siftResult /*: Array<IGatsbyNode> | null */ = filterWithSift(\n    filters,\n    firstOnly,\n    nodeTypeNames,\n    resolvedFields\n  )\n\n  if (stats) {\n    if (!siftResult || siftResult.length === 0) {\n      stats.totalSiftHits++\n    }\n  }\n\n  return siftResult\n}\n\nconst filterToStats = (\n  filter /*: DbQuery*/,\n  filterPath = [],\n  comparatorPath = []\n) => {\n  if (filter.type === `elemMatch`) {\n    return filterToStats(\n      filter.nestedQuery,\n      filterPath.concat(filter.path),\n      comparatorPath.concat([`elemMatch`])\n    )\n  } else {\n    return {\n      filterPath: filterPath.concat(filter.path),\n      comparatorPath: comparatorPath.concat(filter.query.comparator),\n    }\n  }\n}\n\n/**\n * Use sift to apply filters\n *\n * @param {Array<DbQuery>} filters Resolved\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param resolvedFields\n * @returns {Array<IGatsbyNode> | null} Collection of results.\n *   Collection will be limited to 1 if `firstOnly` is true\n */\nconst filterWithSift = (filters, firstOnly, nodeTypeNames, resolvedFields) => {\n  let nodes /*: IGatsbyNode[]*/ = []\n  nodeTypeNames.forEach(typeName => addResolvedNodes(typeName, nodes))\n\n  return runSiftOnNodes(\n    nodes,\n    filters.map(f => dbQueryToSiftQuery(f)),\n    firstOnly,\n    nodeTypeNames,\n    resolvedFields,\n    siftGetNode\n  )\n}\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n *\n * @param {Array<IGatsbyNode>} nodes Should be all nodes of given type(s)\n * @param {Array<DbQuery>} filters Resolved\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param resolvedFields\n * @param {function(id: string): IGatsbyNode | undefined} getNode\n * @returns {Array<IGatsbyNode> | null} Collection of results.\n *   Collection will be limited to 1 if `firstOnly` is true\n */\nconst runSiftOnNodes = (\n  nodes,\n  filters,\n  firstOnly,\n  nodeTypeNames,\n  resolvedFields,\n  getNode\n) => {\n  // If the query for single node only has a filter for an \"id\"\n  // using \"eq\" operator, then we'll just grab that ID and return it.\n  if (isEqId(filters)) {\n    const node = getNode(filters[0].id.$eq)\n\n    if (\n      !node ||\n      (node.internal && !nodeTypeNames.includes(node.internal.type))\n    ) {\n      if (firstOnly) {\n        return []\n      }\n      return null\n    }\n\n    return [node]\n  }\n\n  if (firstOnly) {\n    return handleFirst(filters, nodes)\n  } else {\n    return handleMany(filters, nodes)\n  }\n}\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n *\n * @param {Array<IGatsbyNode> | null} nodes Pre-filtered list of nodes\n * @param {Object | undefined} sort Sorting arguments\n * @param resolvedFields\n * @returns {Array<IGatsbyNode> | undefined | null} Same as input, except sorted\n */\nconst sortNodes = (nodes, sort, resolvedFields, stats) => {\n  // `undefined <= 1` and `undefined > 1` are both false so invert the result...\n  if (!sort || !(nodes?.length > 1)) {\n    return nodes\n  }\n\n  // create functions that return the item to compare on\n  const dottedFields = objectToDottedField(resolvedFields)\n  const dottedFieldKeys = Object.keys(dottedFields)\n  const sortFields = sort.fields.map(field => {\n    if (\n      dottedFields[field] ||\n      dottedFieldKeys.some(key => field.startsWith(key))\n    ) {\n      return `__gatsby_resolved.${field}`\n    } else {\n      return field\n    }\n  })\n  const sortFns = sortFields.map(field => v => getValueAt(v, field))\n  const sortOrder = sort.order.map(order => order.toLowerCase())\n\n  if (stats) {\n    sortFields.forEach(sortField => {\n      stats.uniqueSorts.add(sortField)\n    })\n  }\n\n  return _.orderBy(nodes, sortFns, sortOrder)\n}\n"],"file":"run-sift.js"}