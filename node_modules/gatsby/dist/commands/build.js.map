{"version":3,"sources":["../../src/commands/build.ts"],"names":["cachedPageData","cachedWebpackCompilationHash","process","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","pageData","webpackCompilationHash","module","exports","build","program","profile","report","warn","publicDir","path","join","directory","openTracingConfigFile","buildActivity","phantomActivity","start","telemetry","trackCli","exitCode","buildSpan","span","setTag","graphqlRunner","bootstrapGraphQLRunner","parentSpan","GraphQLRunner","store","collectStats","graphqlTracing","processPageQueries","processStaticQueries","queryUtil","getInitialQueryProcessors","graphql","activity","activityTimer","stats","err","panic","Stage","BuildJavascript","end","workerPool","WorkerPool","create","hash","getState","appDataUtil","exists","dispatch","type","payload","write","pages","forEach","_value","key","has","boundActionCreators","removePageData","id","isTrackingEnabled","bundleSizes","toJson","assets","filter","asset","name","endsWith","map","size","pageDataSizes","pageDataStats","values","addSiteMeasurement","bundleStats","aggregateStats","queryStats","getStats","setProgramStatus","db","saveState","pagePaths","keys","buildUtils","getChangedPageDataKeys","createProgress","length","stage","BuildHTML","context","errorPath","ref","match","message","error","done","deletedPageKeys","collectRemovedPageData","removePageFiles","info","uptime","finish","argv","includes","createdFilesPath","resolve","deletedFilesPath","fs","writeFile"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AAGA,IAAIA,cAAJ;AACA,IAAIC,4BAAJ;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,8CAAhB,EAAgE;AAC9D,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuC,uBAA7C,CAD8D,CAE9D;;AACAN,EAAAA,cAAc,GAAGK,QAAjB;AACAJ,EAAAA,4BAA4B,GAAGK,sBAA/B;AACD;;AAYDC,MAAM,CAACC,OAAP,GAAiB,eAAeC,KAAf,CAAqBC,OAArB,EAAyD;AACxE,MAAIA,OAAO,CAACC,OAAZ,EAAqB;AACnBC,sBAAOC,IAAP,CACG,sKADH;AAGD;;AAED,QAAMC,SAAS,GAAGC,cAAKC,IAAL,CAAUN,OAAO,CAACO,SAAlB,EAA8B,QAA9B,CAAlB;;AACA,0BAAWP,OAAO,CAACQ,qBAAnB;;AACA,QAAMC,aAAa,GAAGP,kBAAOQ,eAAP,CAAwB,OAAxB,CAAtB;;AACAD,EAAAA,aAAa,CAACE,KAAd;;AAEAC,2BAAUC,QAAV,CAAoB,aAApB;;AACA,2BAAWC,QAAQ,IAAI;AACrBF,6BAAUC,QAAV,CAAoB,WAApB,EAAgC;AAAEC,MAAAA;AAAF,KAAhC;AACD,GAFD;AAIA,QAAMC,SAAS,GAAGN,aAAa,CAACO,IAAhC;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAkB,WAAlB,EAA8BjB,OAAO,CAACO,SAAtC;AAEA,QAAM;AAAEW,IAAAA,aAAa,EAAEC;AAAjB,MAA4C,MAAM,wBAAU,EAChE,GAAGnB,OAD6D;AAEhEoB,IAAAA,UAAU,EAAEL;AAFoD,GAAV,CAAxD;AAKA,QAAMG,aAAa,GAAG,IAAIG,4BAAJ,CAAkBC,YAAlB,EAAyB;AAC7CC,IAAAA,YAAY,EAAE,IAD+B;AAE7CC,IAAAA,cAAc,EAAExB,OAAO,CAACwB;AAFqB,GAAzB,CAAtB;;AAKA,QAAM;AACJC,IAAAA,kBADI;AAEJC,IAAAA;AAFI,MAGFC,eAAUC,yBAAV,CAAoC;AACtCR,IAAAA,UAAU,EAAEL,SAD0B;AAEtCG,IAAAA;AAFsC,GAApC,CAHJ;;AAQA,QAAMQ,oBAAoB,EAA1B;AAEA,QAAM,4BAAe,YAAf,EAA4B;AAChCG,IAAAA,OAAO,EAAEV,sBADuB;AAEhCC,IAAAA,UAAU,EAAEL;AAFoB,GAA5B,CAAN,CAxCwE,CA6CxE;AACA;;AACA;;AAEA,MAAIe,QAAQ,GAAG5B,kBAAO6B,aAAP,CACZ,gDADY,EAEb;AAAEX,IAAAA,UAAU,EAAEL;AAAd,GAFa,CAAf;;AAIAe,EAAAA,QAAQ,CAACnB,KAAT;AACA,MAAIqB,KAAJ;;AACA,MAAI;AACFA,IAAAA,KAAK,GAAG,MAAM,4CAAsBhC,OAAtB,EAA+B8B,QAAQ,CAACd,IAAxC,CAAd;AACD,GAFD,CAEE,OAAOiB,GAAP,EAAY;AACZH,IAAAA,QAAQ,CAACI,KAAT,CAAe,+CAAuBC,aAAMC,eAA7B,EAA8CH,GAA9C,CAAf;AACD,GAJD,SAIU;AACRH,IAAAA,QAAQ,CAACO,GAAT;AACD;;AAED,QAAMC,UAAU,GAAGC,UAAU,CAACC,MAAX,EAAnB;AAEA,QAAM5C,sBAAsB,GAAGoC,KAAK,CAACS,IAArC;;AACA,MACE7C,sBAAsB,KAAK0B,aAAMoB,QAAN,GAAiB9C,sBAA5C,IACA,CAAC+C,WAAW,CAACC,MAAZ,CAAmBxC,SAAnB,CAFH,EAGE;AACAkB,iBAAMuB,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAG,8BADM;AAEbC,MAAAA,OAAO,EAAEnD;AAFI,KAAf;;AAKAkC,IAAAA,QAAQ,GAAG5B,kBAAO6B,aAAP,CAAsB,8BAAtB,EAAqD;AAC9DX,MAAAA,UAAU,EAAEL;AADkD,KAArD,CAAX;AAGAe,IAAAA,QAAQ,CAACnB,KAAT;AAEA,UAAMgC,WAAW,CAACK,KAAZ,CAAkB5C,SAAlB,EAA6BR,sBAA7B,CAAN;AAEAkC,IAAAA,QAAQ,CAACO,GAAT;AACD;;AAED,QAAMZ,kBAAkB,EAAxB;;AAEA,MAAIjC,OAAO,CAACC,GAAR,CAAYC,8CAAhB,EAAgE;AAC9D,UAAM;AAAEuD,MAAAA;AAAF,QAAY3B,aAAMoB,QAAN,EAAlB;;AACA,QAAIpD,cAAJ,EAAoB;AAClBA,MAAAA,cAAc,CAAC4D,OAAf,CAAuB,CAACC,MAAD,EAASC,GAAT,KAAiB;AACtC,YAAI,CAACH,KAAK,CAACI,GAAN,CAAUD,GAAV,CAAL,EAAqB;AACnBE,uCAAoBC,cAApB,CAAmC;AACjCC,YAAAA,EAAE,EAAEJ;AAD6B,WAAnC;AAGD;AACF,OAND;AAOD;AACF;;AAED,MAAIxC,yBAAU6C,iBAAV,EAAJ,EAAmC;AACjC;AACA,UAAMC,WAAW,GAAG1B,KAAK,CACtB2B,MADiB,CACV;AAAEC,MAAAA,MAAM,EAAE;AAAV,KADU,EAEjBA,MAFiB,CAEVC,MAFU,CAEHC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAqB,KAArB,CAFN,EAGjBC,GAHiB,CAGbH,KAAK,IAAIA,KAAK,CAACI,IAAN,GAAa,IAHT,CAApB;AAIA,UAAMC,aAAa,GAAG,CAAC,GAAG7C,aAAMoB,QAAN,GAAiB0B,aAAjB,CAA+BC,MAA/B,EAAJ,CAAtB;;AAEAzD,6BAAU0D,kBAAV,CAA8B,WAA9B,EAA0C;AACxCC,MAAAA,WAAW,EAAE3D,yBAAU4D,cAAV,CAAyBd,WAAzB,CAD2B;AAExCU,MAAAA,aAAa,EAAExD,yBAAU4D,cAAV,CAAyBL,aAAzB,CAFyB;AAGxCM,MAAAA,UAAU,EAAEvD,aAAa,CAACwD,QAAd;AAH4B,KAA1C;AAKD;;AAEDpB,+BAAoBqB,gBAApB,CAAsC,kCAAtC;;AAEA,QAAMC,YAAGC,SAAH,EAAN;AAEA,QAAM,sDAAN,CAvHwE,CAyHxE;;AACA,QAAMD,YAAGC,SAAH,EAAN;AAEA,MAAIC,SAAS,GAAG,CAAC,GAAGxD,aAAMoB,QAAN,GAAiBO,KAAjB,CAAuB8B,IAAvB,EAAJ,CAAhB,CA5HwE,CA8HxE;AACA;;AACA,MACEvF,OAAO,CAACC,GAAR,CAAYC,8CAAZ,IACAH,4BAA4B,KAAK+B,aAAMoB,QAAN,GAAiB9C,sBAFpD,EAGE;AACAkF,IAAAA,SAAS,GAAGE,UAAU,CAACC,sBAAX,CACV3D,aAAMoB,QAAN,EADU,EAEVpD,cAFU,CAAZ;AAID;;AAEDwC,EAAAA,QAAQ,GAAG5B,kBAAOgF,cAAP,CACR,gCADQ,EAETJ,SAAS,CAACK,MAFD,EAGT,CAHS,EAIT;AACE/D,IAAAA,UAAU,EAAEL;AADd,GAJS,CAAX;AAQAe,EAAAA,QAAQ,CAACnB,KAAT;;AACA,MAAI;AACF,UAAM,0BAAU;AACdX,MAAAA,OADc;AAEdoF,MAAAA,KAAK,EAAEjD,aAAMkD,SAFC;AAGdP,MAAAA,SAHc;AAIdhD,MAAAA,QAJc;AAKdQ,MAAAA;AALc,KAAV,CAAN;AAOD,GARD,CAQE,OAAOL,GAAP,EAAY;AACZ,QAAIuB,EAAE,GAAI,OAAV,CADY,CACK;;AACjB,UAAM8B,OAAO,GAAG;AACdC,MAAAA,SAAS,EAAEtD,GAAG,CAACqD,OAAJ,IAAerD,GAAG,CAACqD,OAAJ,CAAYjF,IADxB;AAEdmF,MAAAA,GAAG,EAAG;AAFQ,KAAhB;AAKA,UAAMC,KAAK,GAAGxD,GAAG,CAACyD,OAAJ,CAAYD,KAAZ,CACZ,yFADY,CAAd;;AAGA,QAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlB,EAAuB;AACrBjC,MAAAA,EAAE,GAAI,OAAN;AACA8B,MAAAA,OAAO,CAACE,GAAR,GAAcC,KAAK,CAAC,CAAD,CAAnB;AACD;;AAED3D,IAAAA,QAAQ,CAACI,KAAT,CAAe;AACbsB,MAAAA,EADa;AAEb8B,MAAAA,OAFa;AAGbK,MAAAA,KAAK,EAAE1D;AAHM,KAAf;AAKD;;AACDH,EAAAA,QAAQ,CAAC8D,IAAT;AAEA,MAAIC,eAAyB,GAAG,EAAhC;;AACA,MAAIrG,OAAO,CAACC,GAAR,CAAYC,8CAAhB,EAAgE;AAC9DoC,IAAAA,QAAQ,GAAG5B,kBAAO6B,aAAP,CAAsB,2BAAtB,CAAX;AACAD,IAAAA,QAAQ,CAACnB,KAAT;AACAkF,IAAAA,eAAe,GAAGb,UAAU,CAACc,sBAAX,CAChBxE,aAAMoB,QAAN,EADgB,EAEhBpD,cAFgB,CAAlB;AAIA,UAAM0F,UAAU,CAACe,eAAX,CAA2B3F,SAA3B,EAAsCyF,eAAtC,CAAN;AAEA/D,IAAAA,QAAQ,CAACO,GAAT;AACD;;AAEDP,EAAAA,QAAQ,GAAG5B,kBAAO6B,aAAP,CAAsB,aAAtB,EAAoC;AAAEX,IAAAA,UAAU,EAAEL;AAAd,GAApC,CAAX;AACAe,EAAAA,QAAQ,CAACnB,KAAT;AACA,QAAM,4BAAe,aAAf,EAA6B;AACjCkB,IAAAA,OAAO,EAAEV,sBADwB;AAEjCC,IAAAA,UAAU,EAAEL;AAFqB,GAA7B,CAAN;AAIAe,EAAAA,QAAQ,CAACO,GAAT,GArMwE,CAuMxE;;AACA,QAAMuC,YAAGC,SAAH,EAAN;;AAEA3E,oBAAO8F,IAAP,CAAa,oBAAmBxG,OAAO,CAACyG,MAAR,EAAiB,MAAjD;;AAEAlF,EAAAA,SAAS,CAACmF,MAAV;AACA,QAAM,yBAAN;AACA5D,EAAAA,UAAU,CAACD,GAAX;AACA5B,EAAAA,aAAa,CAAC4B,GAAd;;AAEA,MACE7C,OAAO,CAACC,GAAR,CAAYC,8CAAZ,IACAF,OAAO,CAAC2G,IAAR,CAAaC,QAAb,CAAuB,aAAvB,CAFF,EAGE;AACA,QAAItB,SAAS,CAACK,MAAd,EAAsB;AACpBjF,wBAAO8F,IAAP,CACG,iBAAgBlB,SAAS,CACvBb,GADc,CACV5D,IAAI,IAAK,iBAAgBA,IAAK,EADpB,EAEdC,IAFc,CAER,IAFQ,CAEH,EAHhB;AAKD;;AAED,QAAIuF,eAAe,CAACV,MAApB,EAA4B;AAC1BjF,wBAAO8F,IAAP,CACG,mBAAkBH,eAAe,CAC/B5B,GADgB,CACZ5D,IAAI,IAAK,iBAAgBA,IAAK,EADlB,EAEhBC,IAFgB,CAEV,IAFU,CAEL,EAHhB;AAKD;AACF;;AAED,MACEd,OAAO,CAACC,GAAR,CAAYC,8CAAZ,IACAF,OAAO,CAAC2G,IAAR,CAAaC,QAAb,CAAuB,iBAAvB,CAFF,EAGE;AACA,UAAMC,gBAAgB,GAAGhG,cAAKiG,OAAL,CACtB,GAAEtG,OAAO,CAACO,SAAU,SADE,EAEtB,cAFsB,CAAzB;;AAIA,UAAMgG,gBAAgB,GAAGlG,cAAKiG,OAAL,CACtB,GAAEtG,OAAO,CAACO,SAAU,SADE,EAEtB,kBAFsB,CAAzB;;AAKA,QAAIuE,SAAS,CAACK,MAAd,EAAsB;AACpB,YAAMqB,iBAAGC,SAAH,CAAaJ,gBAAb,EAAgC,GAAEvB,SAAS,CAACxE,IAAV,CAAgB,IAAhB,CAAqB,IAAvD,EAA6D,MAA7D,CAAN;;AACAJ,wBAAO8F,IAAP,CAAa,6BAAb;AACD;;AACD,QAAIH,eAAe,CAACV,MAApB,EAA4B;AAC1B,YAAMqB,iBAAGC,SAAH,CACJF,gBADI,EAEH,GAAEV,eAAe,CAACvF,IAAhB,CAAsB,IAAtB,CAA2B,IAF1B,EAGH,MAHG,CAAN;;AAKAJ,wBAAO8F,IAAP,CAAa,iCAAb;AACD;AACF;;AAED,MAAI,MAAM,mDAAV,EAAgD;AAC9C;AACD;AACF,CApQD","sourcesContent":["import path from \"path\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport signalExit from \"signal-exit\"\nimport fs from \"fs-extra\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { buildHTML } from \"./build-html\"\nimport { buildProductionBundle } from \"./build-javascript\"\nimport bootstrap from \"../bootstrap\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { GraphQLRunner } from \"../query/graphql-runner\"\nimport { copyStaticDirs } from \"../utils/get-static-dir\"\nimport { initTracer, stopTracer } from \"../utils/tracer\"\nimport db from \"../db\"\nimport { store, readState } from \"../redux\"\nimport queryUtil from \"../query\"\nimport * as appDataUtil from \"../utils/app-data\"\nimport * as WorkerPool from \"../utils/worker/pool\"\nimport { structureWebpackErrors } from \"../utils/webpack-error-utils\"\nimport {\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n} from \"../utils/feedback\"\nimport * as buildUtils from \"./build-utils\"\nimport { boundActionCreators } from \"../redux/actions\"\nimport { waitUntilAllJobsComplete } from \"../utils/wait-until-jobs-complete\"\nimport { IProgram, Stage } from \"./types\"\nimport { PackageJson } from \"../..\"\n\nlet cachedPageData\nlet cachedWebpackCompilationHash\nif (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n  const { pageData, webpackCompilationHash } = readState()\n  // extract only data that we need to reuse and let v8 garbage collect rest of state\n  cachedPageData = pageData\n  cachedWebpackCompilationHash = webpackCompilationHash\n}\n\ninterface IBuildArgs extends IProgram {\n  directory: string\n  sitePackageJson: PackageJson\n  prefixPaths: boolean\n  noUglify: boolean\n  profile: boolean\n  graphqlTracing: boolean\n  openTracingConfigFile: string\n}\n\nmodule.exports = async function build(program: IBuildArgs): Promise<void> {\n  if (program.profile) {\n    report.warn(\n      `React Profiling is enabled. This can have a performance impact. See https://www.gatsbyjs.org/docs/profiling-site-performance-with-react-profiler/#performance-impact`\n    )\n  }\n\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(program.openTracingConfigFile)\n  const buildActivity = report.phantomActivity(`build`)\n  buildActivity.start()\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(exitCode => {\n    telemetry.trackCli(`BUILD_END`, { exitCode })\n  })\n\n  const buildSpan = buildActivity.span\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner: bootstrapGraphQLRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  const graphqlRunner = new GraphQLRunner(store, {\n    collectStats: true,\n    graphqlTracing: program.graphqlTracing,\n  })\n\n  const {\n    processPageQueries,\n    processStaticQueries,\n  } = queryUtil.getInitialQueryProcessors({\n    parentSpan: buildSpan,\n    graphqlRunner,\n  })\n\n  await processStaticQueries()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: bootstrapGraphQLRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  let activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  let stats\n  try {\n    stats = await buildProductionBundle(program, activity.span)\n  } catch (err) {\n    activity.panic(structureWebpackErrors(Stage.BuildJavascript, err))\n  } finally {\n    activity.end()\n  }\n\n  const workerPool = WorkerPool.create()\n\n  const webpackCompilationHash = stats.hash\n  if (\n    webpackCompilationHash !== store.getState().webpackCompilationHash ||\n    !appDataUtil.exists(publicDir)\n  ) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    activity = report.activityTimer(`Rewriting compilation hashes`, {\n      parentSpan: buildSpan,\n    })\n    activity.start()\n\n    await appDataUtil.write(publicDir, webpackCompilationHash)\n\n    activity.end()\n  }\n\n  await processPageQueries()\n\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    const { pages } = store.getState()\n    if (cachedPageData) {\n      cachedPageData.forEach((_value, key) => {\n        if (!pages.has(key)) {\n          boundActionCreators.removePageData({\n            id: key,\n          })\n        }\n      })\n    }\n  }\n\n  if (telemetry.isTrackingEnabled()) {\n    // transform asset size to kB (from bytes) to fit 64 bit to numbers\n    const bundleSizes = stats\n      .toJson({ assets: true })\n      .assets.filter(asset => asset.name.endsWith(`.js`))\n      .map(asset => asset.size / 1000)\n    const pageDataSizes = [...store.getState().pageDataStats.values()]\n\n    telemetry.addSiteMeasurement(`BUILD_END`, {\n      bundleStats: telemetry.aggregateStats(bundleSizes),\n      pageDataStats: telemetry.aggregateStats(pageDataSizes),\n      queryStats: graphqlRunner.getStats(),\n    })\n  }\n\n  boundActionCreators.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`)\n\n  await db.saveState()\n\n  await waitUntilAllJobsComplete()\n\n  // we need to save it again to make sure our latest state has been saved\n  await db.saveState()\n\n  let pagePaths = [...store.getState().pages.keys()]\n\n  // Rebuild subset of pages if user opt into GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES\n  // if there were no source files (for example components, static queries, etc) changes since last build, otherwise rebuild all pages\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    cachedWebpackCompilationHash === store.getState().webpackCompilationHash\n  ) {\n    pagePaths = buildUtils.getChangedPageDataKeys(\n      store.getState(),\n      cachedPageData\n    )\n  }\n\n  activity = report.createProgress(\n    `Building static HTML for pages`,\n    pagePaths.length,\n    0,\n    {\n      parentSpan: buildSpan,\n    }\n  )\n  activity.start()\n  try {\n    await buildHTML({\n      program,\n      stage: Stage.BuildHTML,\n      pagePaths,\n      activity,\n      workerPool,\n    })\n  } catch (err) {\n    let id = `95313` // TODO: verify error IDs exist\n    const context = {\n      errorPath: err.context && err.context.path,\n      ref: ``,\n    }\n\n    const match = err.message.match(\n      /ReferenceError: (window|document|localStorage|navigator|alert|location) is not defined/i\n    )\n    if (match && match[1]) {\n      id = `95312`\n      context.ref = match[1]\n    }\n\n    activity.panic({\n      id,\n      context,\n      error: err,\n    })\n  }\n  activity.done()\n\n  let deletedPageKeys: string[] = []\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    activity = report.activityTimer(`Delete previous page data`)\n    activity.start()\n    deletedPageKeys = buildUtils.collectRemovedPageData(\n      store.getState(),\n      cachedPageData\n    )\n    await buildUtils.removePageFiles(publicDir, deletedPageKeys)\n\n    activity.end()\n  }\n\n  activity = report.activityTimer(`onPostBuild`, { parentSpan: buildSpan })\n  activity.start()\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: bootstrapGraphQLRunner,\n    parentSpan: buildSpan,\n  })\n  activity.end()\n\n  // Make sure we saved the latest state so we have all jobs cached\n  await db.saveState()\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  workerPool.end()\n  buildActivity.end()\n\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    process.argv.includes(`--log-pages`)\n  ) {\n    if (pagePaths.length) {\n      report.info(\n        `Built pages:\\n${pagePaths\n          .map(path => `Updated page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n\n    if (deletedPageKeys.length) {\n      report.info(\n        `Deleted pages:\\n${deletedPageKeys\n          .map(path => `Deleted page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n  }\n\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    process.argv.includes(`--write-to-file`)\n  ) {\n    const createdFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `newPages.txt`\n    )\n    const deletedFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `deletedPages.txt`\n    )\n\n    if (pagePaths.length) {\n      await fs.writeFile(createdFilesPath, `${pagePaths.join(`\\n`)}\\n`, `utf8`)\n      report.info(`.cache/newPages.txt created`)\n    }\n    if (deletedPageKeys.length) {\n      await fs.writeFile(\n        deletedFilesPath,\n        `${deletedPageKeys.join(`\\n`)}\\n`,\n        `utf8`\n      )\n      report.info(`.cache/deletedPages.txt created`)\n    }\n  }\n\n  if (await userPassesFeedbackRequestHeuristic()) {\n    showFeedbackRequest()\n  }\n}\n"],"file":"build.js"}