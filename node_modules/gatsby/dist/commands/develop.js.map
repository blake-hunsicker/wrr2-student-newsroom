{"version":3,"sources":["../../src/commands/develop.ts"],"names":["requireUncached","file","require","cache","resolve","e","doesConfigChangeRequireRestart","lastConfig","newConfig","replacer","_","v","RegExp","toString","oldConfigString","JSON","stringify","siteMetadata","newConfigString","ControllableScript","constructor","script","start","tmpFileName","tmp","tmpNameSync","tmpdir","path","join","process","cwd","fs","outputFileSync","isRunning","env","stdio","stop","signal","code","kill","send","type","action","payload","Promise","on","removeAllListeners","callback","isRestarting","module","exports","program","developProcessPath","proxyPort","port","developPort","developProcess","proxy","targetPort","programPath","directory","statusServerPort","unlock","console","error","exit","statusServer","http","createServer","listen","io","handleChildProcessIPC","msg","serveSite","emit","socket","serveRestartingScreen","rootFile","files","watcher","chokidar","watch","filePath","basename","warn","dirtyFile","all","close","server"],"mappings":"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","sourcesContent":["// NOTE(@mxstbr): Do not use the reporter in this file, as that has side-effects on import which break structured logging\nimport path from \"path\"\nimport http from \"http\"\nimport tmp from \"tmp\"\nimport { spawn } from \"child_process\"\nimport chokidar from \"chokidar\"\nimport getRandomPort from \"detect-port\"\nimport socket from \"socket.io\"\nimport fs from \"fs-extra\"\nimport { isCI, slash } from \"gatsby-core-utils\"\nimport { createServiceLock } from \"gatsby-core-utils/dist/service-lock\"\nimport { startDevelopProxy } from \"../utils/develop-proxy\"\nimport { IProgram } from \"./types\"\n\n// Adapted from https://stackoverflow.com/a/16060619\nconst requireUncached = (file: string): any => {\n  try {\n    delete require.cache[require.resolve(file)]\n  } catch (e) {\n    return null\n  }\n\n  try {\n    return require(file)\n  } catch (e) {\n    return null\n  }\n}\n\n// Heuristics for gatsby-config.js, as not all changes to it require a full restart to take effect\nconst doesConfigChangeRequireRestart = (\n  lastConfig: Record<string, any>,\n  newConfig: Record<string, any>\n): boolean => {\n  // Ignore changes to siteMetadata\n  const replacer = (_, v): string | void => {\n    if (typeof v === `function` || v instanceof RegExp) {\n      return v.toString()\n    } else {\n      return v\n    }\n  }\n\n  const oldConfigString = JSON.stringify(\n    { ...lastConfig, siteMetadata: null },\n    replacer\n  )\n  const newConfigString = JSON.stringify(\n    { ...newConfig, siteMetadata: null },\n    replacer\n  )\n\n  if (oldConfigString === newConfigString) return false\n\n  return true\n}\n\nclass ControllableScript {\n  private process\n  private script\n  public isRunning\n  constructor(script) {\n    this.script = script\n  }\n  start(): void {\n    const tmpFileName = tmp.tmpNameSync({\n      tmpdir: path.join(process.cwd(), `.cache`),\n    })\n    fs.outputFileSync(tmpFileName, this.script)\n    this.isRunning = true\n    this.process = spawn(`node`, [tmpFileName], {\n      env: process.env,\n      stdio: [`inherit`, `inherit`, `inherit`, `ipc`],\n    })\n  }\n  async stop(signal: string | null = null, code?: number): Promise<void> {\n    this.isRunning = false\n    if (signal) {\n      this.process.kill(signal)\n    } else {\n      this.process.send({\n        type: `COMMAND`,\n        action: {\n          type: `EXIT`,\n          payload: code,\n        },\n      })\n    }\n\n    return new Promise(resolve => {\n      this.process.on(`exit`, () => {\n        this.process.removeAllListeners()\n        resolve()\n      })\n    })\n  }\n  on(type, callback): void {\n    this.process.on(type, callback)\n  }\n}\n\nlet isRestarting\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  const developProcessPath = slash(require.resolve(`./develop-process`))\n  // Run the actual develop server on a random port, and the proxy on the program port\n  // which users will access\n  const proxyPort = program.port\n  const developPort = await getRandomPort()\n\n  const developProcess = new ControllableScript(`\n    const cmd = require(${JSON.stringify(developProcessPath)});\n    const args = ${JSON.stringify({\n      ...program,\n      port: developPort,\n      proxyPort,\n    })};\n    cmd(args);\n  `)\n\n  const proxy = startDevelopProxy({\n    proxyPort: proxyPort,\n    targetPort: developPort,\n    programPath: program.directory,\n  })\n\n  const statusServerPort = await getRandomPort()\n\n  let unlock\n  if (!isCI()) {\n    unlock = await createServiceLock(program.directory, `developstatusserver`, {\n      port: statusServerPort,\n    })\n\n    if (!unlock) {\n      console.error(\n        `Looks like develop for this site is already running. Try visiting http://localhost:8000/ maybe?`\n      )\n      process.exit(1)\n    }\n  }\n\n  const statusServer = http.createServer().listen(statusServerPort)\n  const io = socket(statusServer)\n\n  const handleChildProcessIPC = (msg): void => {\n    if (msg.type === `HEARTBEAT`) return\n    if (process.send) {\n      // Forward IPC\n      process.send(msg)\n    }\n\n    if (\n      msg.type === `LOG_ACTION` &&\n      msg.action.type === `SET_STATUS` &&\n      msg.action.payload === `SUCCESS`\n    ) {\n      proxy.serveSite()\n      io.emit(`develop:started`)\n    }\n  }\n\n  io.on(`connection`, socket => {\n    socket.on(`develop:restart`, async () => {\n      isRestarting = true\n      proxy.serveRestartingScreen()\n      io.emit(`develop:is-starting`)\n      await developProcess.stop()\n      developProcess.start()\n      developProcess.on(`message`, handleChildProcessIPC)\n      isRestarting = false\n    })\n  })\n\n  developProcess.start()\n  developProcess.on(`message`, handleChildProcessIPC)\n\n  // Plugins can call `process.exit` which would be sent to `develop-process` (child process)\n  // This needs to be propagated back to the parent process\n  developProcess.on(`exit`, code => {\n    if (isRestarting) return\n    process.exit(code)\n  })\n\n  const rootFile = (file: string): string => path.join(program.directory, file)\n\n  const files = [rootFile(`gatsby-config.js`), rootFile(`gatsby-node.js`)]\n  let lastConfig = requireUncached(rootFile(`gatsby-config.js`))\n\n  let watcher\n\n  if (!isCI()) {\n    chokidar.watch(files).on(`change`, filePath => {\n      const file = path.basename(filePath)\n\n      if (file === `gatsby-config.js`) {\n        const newConfig = requireUncached(rootFile(`gatsby-config.js`))\n\n        if (!doesConfigChangeRequireRestart(lastConfig, newConfig)) {\n          lastConfig = newConfig\n          return\n        }\n\n        lastConfig = newConfig\n      }\n\n      console.warn(\n        `develop process needs to be restarted to apply the changes to ${file}`\n      )\n      io.emit(`develop:needs-restart`, {\n        dirtyFile: file,\n      })\n    })\n  }\n\n  process.on(`beforeExit`, async () => {\n    await Promise.all([\n      watcher?.close(),\n      unlock?.(),\n      new Promise(resolve => {\n        statusServer.close(resolve)\n      }),\n      new Promise(resolve => {\n        proxy.server.close(resolve)\n      }),\n    ])\n  })\n\n  process.on(`SIGINT`, async () => {\n    await developProcess.stop(`SIGINT`)\n    process.exit()\n  })\n\n  process.on(`SIGTERM`, async () => {\n    await developProcess.stop(`SIGTERM`)\n    process.exit()\n  })\n}\n"],"file":"develop.js"}